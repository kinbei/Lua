name: Fetch Lua

on:
  workflow_dispatch:
    inputs:
      url_prefix:
        description: 'Link prefix (https://lua.org/work/ or https://lua.org/ftp/)'
        required: true
        default: 'https://lua.org/ftp/'
      version:
        description: 'Version (optional, will fetch from page if not set)'
        required: false

permissions:
  contents: write

jobs:
  fetch-lua:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Import GPG key for signed commits
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
          
      - name: Configure Git identity
        run: |
          git config --global user.name "${{ secrets.GIT_USER_NAME }}"
          git config --global user.email "${{ secrets.GIT_USER_EMAIL }}"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Python packages
        run: pip install requests lxml

      - name: Scrape Lua version and download URL
        id: scrape
        run: |
          import os, requests
          from lxml import html

          prefix = '${{ github.event.inputs.url_prefix }}'
          override_version = '${{ github.event.inputs.version }}'

          r = requests.get(prefix)
          tree = html.fromstring(r.content)

          links = tree.xpath('//a[starts-with(@href, "lua-") and substring(@href, 5, 1) >= "0" and substring(@href, 5, 1) <= "9" and contains(@href, ".tar.gz")]/@href')
          if not links:
              raise Exception("No .tar.gz links found on the page")

          filename = links[0].split("/")[-1]
          version = override_version or filename.replace('.tar.gz', '').replace('lua-', '')
          download_url = prefix + filename

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              fh.write(f"version={version}\n")
              fh.write(f"url={download_url}\n")

          print(f"Version: {version}")
          print(f"Download URL: {download_url}")
        shell: python

      - name: Download Lua source tarball
        run: |
          mkdir -p /tmp/lua-src
          curl -L -o /tmp/lua-src/lua.tar.gz ${{ steps.scrape.outputs.url }}

      - name: Sync Lua source to branches
        env:
          VERSION: ${{ steps.scrape.outputs.version }}
          URL_PREFIX: ${{ github.event.inputs.url_prefix }}
        run: |
          sync_to_branch() {
            local target_branch="$1"
            local version="$2"
            if git ls-remote --exit-code --heads origin "$target_branch" > /dev/null; then
              git fetch origin "$target_branch"
              git checkout "$target_branch"
              git reset --hard origin/"$target_branch"
            else
              git checkout --orphan "$target_branch"
            fi

            find . -mindepth 1 ! -name '.git' ! -path './.git/*' -exec rm -rf {} +
            tar --strip-components=1 -xzf /tmp/lua-src/lua.tar.gz -C .
            git add -A
            if git diff --cached --quiet; then
              echo "Nothing to commit to $target_branch"
            else
              git commit -S -m "Fetch Lua $version"
              git push --no-signed origin "$target_branch"
            fi
          }

          sync_to_branch "$VERSION" "$VERSION"

          if [[ "$URL_PREFIX" == "https://lua.org/ftp/" && -z "${{ github.event.inputs.version }}" ]]; then
            sync_to_branch "main" "$VERSION"
          fi
          
          if [[ "$URL_PREFIX" == "https://lua.org/work/" && -z "${{ github.event.inputs.version }}" ]]; then
            sync_to_branch "rc" "$VERSION"
          fi
